/**
 * @file mock_abc.c
 *
 * @brief Auto generated mock implementation for the header file:
 *        abc.h
 *
 * THIS FILE WAS AUTOGENERATED ON 11/11/2020 BY MCMOCK DO NOT EDIT
 */

#include "mock_abc.h"
#include "samples/abc/abc.h"

#include "mcmock.h"
#include <check.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdarg.h>

/* String representations for each mocked API */
static const char * api_name_abc_method = "abc_method";
static const char * api_name_register_handler = "register_handler";

/* Structure to store expected test conditions for the mocked API abc_method() */
typedef struct
{
    const char * api_name;
    abc_int arg;
    bool ignore_arg;
    abc_int_t retval;
} abc_method_t;

/* Structure to store expected test conditions for the mocked API register_handler() */
typedef struct
{
    const char * api_name;
    abc_message_handler_t handler;
    bool ignore_handler;
} register_handler_t;

/*******************************************************************************
* Mocked APIs
*/

abc_int_t abc_method( abc_int arg )
{
    abc_method_t *conditions = mcmock_get_next_expectation();

    mcmock_assert_msg(
        conditions == NULL,
        "Code under test called API abc_method(), but no expectations have been set" );

    mcmock_assert_msg(
        strcmp( conditions->api_name, api_name_abc_method ) != 0,
        "Code under test called API abc_method(), but test expected API %s() to be called",
        conditions->api_name );

    /* Check parameter [arg] matches the expected value */
    if ( !conditions->ignore_arg )
    {
        mcmock_assert_msg(
            conditions->arg != arg,
            "Function abc_method() parameter [arg]: expected[%p] actual[%p]",
            conditions->arg,
            arg );
    }

    return conditions->retval;
}

void register_handler( abc_message_handler_t handler )
{
    register_handler_t *conditions = mcmock_get_next_expectation();

    mcmock_assert_msg(
        conditions == NULL,
        "Code under test called API register_handler(), but no expectations have been set" );

    mcmock_assert_msg(
        strcmp( conditions->api_name, api_name_register_handler ) != 0,
        "Code under test called API register_handler(), but test expected API %s() to be called",
        conditions->api_name );

    /* Check parameter [handler] matches the expected value */
    if ( !conditions->ignore_handler )
    {
        mcmock_assert_msg(
            conditions->handler != handler,
            "Function register_handler() parameter [handler]: expected[%p] actual[%p]",
            conditions->handler,
            handler );
    }

}

/*******************************************************************************
* APIs for Unit Tests
*/

void mock_abc_method_expect_and_return( abc_int arg, abc_int_t retval )
{
    abc_method_t *conditions = (abc_method_t *)malloc( sizeof( abc_method_t ) );
    conditions->api_name = api_name_abc_method;
    conditions->arg = arg;
    conditions->retval = retval;
    conditions->ignore_arg = false;

    mcmock_register_expectation( (void*)conditions, api_name_abc_method );
}

void mock_abc_method_ignore_arg_arg( void )
{
    abc_method_t * conditions = ( abc_method_t * )mcmock_peek_latest_expectation();
    mcmock_assert_msg(
        strcmp( conditions->api_name, api_name_abc_method ) != 0,
        "\nTest error: Cannot ignore parameter [arg] for API [abc_method] because the expectation is for API [%s]",
        conditions->api_name );
    conditions->ignore_arg = true;
}

void mock_register_handler_expect( abc_message_handler_t handler )
{
    register_handler_t *conditions = (register_handler_t *)malloc( sizeof( register_handler_t ) );
    conditions->api_name = api_name_register_handler;
    conditions->handler = handler;
    conditions->ignore_handler = false;

    mcmock_register_expectation( (void*)conditions, api_name_register_handler );
}

void mock_register_handler_ignore_arg_handler( void )
{
    register_handler_t * conditions = ( register_handler_t * )mcmock_peek_latest_expectation();
    mcmock_assert_msg(
        strcmp( conditions->api_name, api_name_register_handler ) != 0,
        "\nTest error: Cannot ignore parameter [handler] for API [register_handler] because the expectation is for API [%s]",
        conditions->api_name );
    conditions->ignore_handler = true;
}
